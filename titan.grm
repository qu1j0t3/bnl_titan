;; This file is part of an assembler for bootnecklad's Titan
;; Copyright (C) 2011 Toby Thain, toby@telegraphics.com.au
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by  
;; the Free Software Foundation; either version 2 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License  
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

(require-extension lalr)

(define titan-parser
  (lalr-parser

    ;;; options
    (output:    titan-parser "titan.grm.scm")
    (out-table: "titan.grm.out")

    ;;; tokens
    (NOP ADD SUB AND OR NOT XOR PSH POP JMP JPI JPZ JPC JPS STM LDM  ; mnemonics
     MOV CLR                                                         ; pseudo-instructions
     ACONST REG                                                      ; operands
     NEWLINE COMMA                                                   ; punctuation
     LABEL)                                                          ; label definition

    ;;; grammar rules
    (lines (lines line) : $2
           (line)       : $1)

    (line (NEWLINE)       : (void)           ; allow blank lines in source
          (LABEL NEWLINE) : (list-line $1)   ; define label with current address
          (instr NEWLINE) : (list-line $1))  ; list each assembled instruction
    (instr-impl (NOP) : $1
                (ADD) : $1
                (SUB) : $1
                (AND) : $1
                (OR)  : $1
                (NOT) : $1
                (XOR) : $1)
    (instr-reg  (PSH) : $1
                (POP) : $1)
    (instr-addr (JMP) : $1
                (JPI) : $1
                (JPZ) : $1
                (JPC) : $1
                (JPS) : $1
                (STM) : $1
                (LDM) : $1)
    (instr (instr-impl)        : (assemble-impl $1)
           (instr-reg  REG)    : (assemble-reg  $1 (car $2))
           (instr-addr ACONST) : (assemble-addr $1 (car $2))
           (MOV REG COMMA REG) : (list (assemble-reg 'PSH (car $2))
                                       (assemble-reg 'POP (car $4)))
           (CLR REG)           : (list (assemble-reg 'PSH 0)
                                       (assemble-reg 'POP (car $2)))
           (ACONST)            : (assemble-byte (car $1)))))  ; byte constant

