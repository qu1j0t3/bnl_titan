;; This file is part of an assembler for bootnecklad's Titan
;; Copyright (C) 2011 Toby Thain, toby@telegraphics.com.au
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by  
;; the Free Software Foundation; either version 2 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License  
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

; Titan-2 assembly for Pearson hashing
; see http://www.apps.ietf.org/rfc/rfc3074.html
;     http://cs.mwsu.edu/~griffin/courses/2133/downloads/Old_Assignments/p677-pearson.pdf

;/* A "mixing table" of 256 distinct values, in pseudo-random order. */
;unsigned char loadb_mx_tbl[256] ={
;    251, 175, 119, 215, 81, 14, 79, 191, 103, 49, 181, 143, 186, 157, 0,
;    ...
;    149, 80, 170, 68, 6, 169, 234, 151
;};
;unsigned char loadb_p_hash(
;        const unsigned char *key,       /* The key to be hashed */
;        const int len )                 /* Key length in bytes  */
;{
;    unsigned char hash  = len;
;    int i;
;    for (i=len ; i > 0 ; )
;        hash = loadb_mx_tbl [ hash ^ key[ --i ] ];
;    return( hash ); 
;}

; Code: 28 bytes

#Pearson
	LDM D, #KeyLen  ; D shall index from last key element to first.
	MOV D, A        ; A is the hash state. It is initialised to key length.
	                ; (in the Pearson algorithm as first published, it is initialised to zero.)
	LDC B, 0x01
#Loop
	SUB D, B
	JPS #Done       ; this limits keys to 128 bytes
	LDM C, #Key[D]  ; get next key byte
	XOR A, C
	PSH D           ; save key index
	MOV A, D        ; mixing table is indexed by current hash state
	LDM A, #MixTable[D]
	POP D           ; restore key index
	JMP #Loop
#Done
	JMP #Done

#KeyLen
	0x05
#Key
	0x55
	0x52
	0x4d
	0x4f
	0x4d
#MixTable  ; table of 256 values, part of the hash state transition function
	0xFB
	0xAF
	0x77
	0xD7
	0x51
	0xE
	0x4F
	0xBF
	0x67
	0x31
	0xB5
	0x8F
	0xBA
	0x9D
	0x0
	0xE8
	0x1F
	0x20
	0x37
	0x3C
	0x98
	0x3A
	0x11
	0xED
	0xAE
	0x46
	0xA0
	0x90
	0xDC
	0x5A
	0x39
	0xDF
	0x3B
	0x3
	0x12
	0x8C
	0x6F
	0xA6
	0xCB
	0xC4
	0x86
	0xF3
	0x7C
	0x5F
	0xDE
	0xB3
	0xC5
	0x41
	0xB4
	0x30
	0x24
	0xF
	0x6B
	0x2E
	0xE9
	0x82
	0xA5
	0x1E
	0x7B
	0xA1
	0xD1
	0x17
	0x61
	0x10
	0x28
	0x5B
	0xDB
	0x3D
	0x64
	0xA
	0xD2
	0x6D
	0xFA
	0x7F
	0x16
	0x8A
	0x1D
	0x6C
	0xF4
	0x43
	0xCF
	0x9
	0xB2
	0xCC
	0x4A
	0x62
	0x7E
	0xF9
	0xA7
	0x74
	0x22
	0x4D
	0xC1
	0xC8
	0x79
	0x5
	0x14
	0x71
	0x47
	0x23
	0x80
	0xD
	0xB6
	0x5E
	0x19
	0xE2
	0xE3
	0xC7
	0x4B
	0x1B
	0x29
	0xF5
	0xE6
	0xE0
	0x2B
	0xE1
	0xB1
	0x1A
	0x9B
	0x96
	0xD4
	0x8E
	0xDA
	0x73
	0xF1
	0x49
	0x58
	0x69
	0x27
	0x72
	0x3E
	0xFF
	0xC0
	0xC9
	0x91
	0xD6
	0xA8
	0x9E
	0xDD
	0x94
	0x9A
	0x7A
	0xC
	0x54
	0x52
	0xA3
	0x2C
	0x8B
	0xE4
	0xEC
	0xCD
	0xF2
	0xD9
	0xB
	0xBB
	0x92
	0x9F
	0x40
	0x56
	0xEF
	0xC3
	0x2A
	0x6A
	0xC6
	0x76
	0x70
	0xB8
	0xAC
	0x57
	0x2
	0xAD
	0x75
	0xB0
	0xE5
	0xF7
	0xFD
	0x89
	0xB9
	0x63
	0xA4
	0x66
	0x93
	0x2D
	0x42
	0xE7
	0x34
	0x8D
	0xD3
	0xC2
	0xCE
	0xF6
	0xEE
	0x38
	0x6E
	0x4E
	0xF8
	0x3F
	0xF0
	0xBD
	0x5D
	0x5C
	0x33
	0x35
	0xB7
	0x13
	0xAB
	0x48
	0x32
	0x21
	0x68
	0x65
	0x45
	0x8
	0xFC
	0x53
	0x78
	0x4C
	0x87
	0x55
	0x36
	0xCA
	0x7D
	0xBC
	0xD5
	0x60
	0xEB
	0x88
	0xD0
	0xA2
	0x81
	0xBE
	0x84
	0x9C
	0x26
	0x2F
	0x1
	0x7
	0xFE
	0x18
	0x4
	0xD8
	0x83
	0x59
	0x15
	0x1C
	0x85
	0x25
	0x99
	0x95
	0x50
	0xAA
	0x44
	0x6
	0xA9
	0xEA
	0x97
; END

